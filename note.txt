Prosolorg.com ==> Problem solving Organization 


#### Form: flask-wtf
1. To use method on url route, we need to pass: methods to route
    @app.route("/register", methods=['GET', 'POST'])

2. f String has just used in python > 3
flash(f"Account created for user: {form.username.data}!", "success")

3. We need secret key for forms because it's make anyone can not change cookies, session, ... for security
To make secret you can do by type in terminal:
    python
    import secrets
    secrets.token_hex(16)   -> it will creat 16 random character

#### Database : flask-sqlalchemy
1. We use sqlite instead of sql server. Sqlite save our database to file.
    app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///site.db"
    ///: relative path
2. To first create our database file.
    + Run app
    + Go to terminal: python  -> from flask_blog import db

>>> db.create_all()
>>> from flask_blog import User, Post
>>> user1 = User(username='Corey', email='test1@gmail.com', password='123456789')
>>> user2 = User(username='ThieuNv', email='test2@gmail.com', password='987654321')
>>> db.session.add(user1)
>>> db.session.add(user2)
>>> db.session.commit()

>>> User.query.all()
[User('Corey', 'test1@gmail.com', 'default.jpg'), User('ThieuNv', 'test2@gmail.com', 'default.jpg')]
>>> User.query.first()
User('Corey', 'test1@gmail.com', 'default.jpg')

>>> User.query.filter_by(username='ThieuNv').all()
[User('ThieuNv', 'test2@gmail.com', 'default.jpg')]
>>> User.query.filter_by(username='ThieuNv').first()
User('ThieuNv', 'test2@gmail.com', 'default.jpg')
>>> user = User.query.filter_by(username='ThieuNv').first()

>>> user
User('ThieuNv', 'test2@gmail.com', 'default.jpg')
>>> user.id
2
>>> user = User.query.get(1)
>>> user
User('Corey', 'test1@gmail.com', 'default.jpg')
>>> user.posts
[]
>>> user.id
1
>>> post1 = Post(title='Blog 1', content='First Post Content!!!', user_id=user.id)
>>> post2 = Post(title='Blog 2', content='Second Post Content!!!', user_id=user.id)
>>> db.session.add(post1)
>>> db.session.add(post2)
>>> db.session.commit()

>>> user.posts
[User('Blog 1', '2018-06-14 10:35:39.153030'), User('Blog 2', '2018-06-14 10:35:39.153030')]

>>> for post in user.posts:
...     print(post.title)
...
Blog 1
Blog 2
>>> post = Post.query.first()
>>> post
User('Blog 1', '2018-06-14 10:35:39.153030')
>>> post.user_id
1
>>> post.author
User('Corey', 'test1@gmail.com', 'default.jpg')

>>> User.query.all()
[User('Corey', 'test1@gmail.com', 'default.jpg'), User('ThieuNv', 'test2@gmail.com', 'default.jpg')]
>>> Post.query.all()
[User('Blog 1', '2018-06-14 10:35:39.153030'), User('Blog 2', '2018-06-14 10:35:39.153030')]

>>> db.drop_all()
>>> User.query.all()
>>> db.create_all()
>>> User.query.all()
[]

##### Password : flask-bcrypt

>>> from flask_bcrypt import Bcrypt
>>> bcrypt = Bcrypt()
>>> bcrypt.generate_password_hash('testing')
b'$2b$12$6NCAXRxV21yYajFeFfRsI.8yzwUul9tFjaNrM34LrqIP/TPS.uuU2'
>>> bcrypt.generate_password_hash('testing').decode('utf-8')
'$2b$12$WDHnEOyN8lmUYYdf8skG4uFPdbHRLfCZGR0k96Obp9Jj14P/8I5Ly'
>>> bcrypt.generate_password_hash('testing').decode('utf-8')
'$2b$12$bCCr1VMCWlW0Ix12HQmL2epeWIc.6GhfkZLG9Oc.3szpiDaTDKS/i'
>>> hash_pw = bcrypt.generate_password_hash('testing').decode('utf-8')

>>> bcrypt.check_password_hash(hash_pw, 'thieunv')
False
>>> bcrypt.check_password_hash(hash_pw, 'testing')
True



##### Save user registration to database

1. Check validation based on flask-wtf:
    def validate_field(self, field):
        if True:
            raise ValidationError('Validation Message')

2. Access to private link when already logout. To prevent it.
    @app.route("/account")
    @login_required

But first we have to set the view for login_required by in __init__:
    login_manager.login_view = 'login'      # function name of route

3. To get parameter from url when logged in use:
    request.args.get('name_of_parameter')

4. When you try to access page without logged in, and then you logged in, It's good if then directly
redirect to page which you want to access. So use:
    next_page = request.args.get('next')
    return redirect(next_page) if next_page else redirect(url_for("home"))


##### Update account profile
1. When you don't update username or email, but still click button update.
    if email.data != current_user.email:
--> Check if email equal to current email.

2. Show info into a form when reach to account page
    In account route:
        elif request.method == 'GET':

3. Cut image using pillow
    from PIL import Image

    img = Image.open(form_picture)  # open image first
    img.thumbnail(output_size)      # cut image using size output
    img.save(picture_path)          # save image after cut


#### Pagination
1. To make pagination work, we could try some method below:
>>> posts = Post.query.all()
>>> for post in posts:
...     print(post)

>>> posts = Post.query.paginate()
>>> posts
<flask_sqlalchemy.Pagination object at 0x7f72299590f0>
>>> dir(posts)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__',
'__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__',
'__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'has_next', 'has_prev', 'items', 'iter_pages',
'next', 'next_num', 'page', 'pages', 'per_page', 'prev', 'prev_num', 'query', 'total']
>>> posts.per_page
20
>>> posts.page
1
>>> for post in posts.items:
...     print(post)

>>> posts = Post.query.paginate(page=2)
>>> posts = Post.query.paginate(per_page=5)
>>> posts.total
26


####### Email and password reset
1. Serializer object with time for token

>>> from itsdangerous import TimedJSONWebSignatureSerializer as Serializer
>>> s = Serializer('secret', 30)
>>> token = s.dumps({'user_id': 1}).decode('utf-8')
>>> token
'eyJpYXQiOjE1Mjk0MTE3ODAsImV4cCI6MTUyOTQxMTgxMCwiYWxnIjoiSFMyNTYifQ.eyJ1c2VyX2lkIjoxfQ.oIie0IYuj_Lu09LiOB9IjxfCWYfTcHxiLzg8NbbMdMg'
>>> s
>>> s.loads(token)
{'user_id': 1}
>>> s.loads(token)                      ( expired after 30 seconds)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/thieunv/miniconda2/envs/web/lib/python3.5/site-packages/itsdangerous.py", line 807, in loads
    date_signed=self.get_issue_date(header))
itsdangerous.SignatureExpired: Signature expired


2. How to set secret environment variable in Ubuntu 16.04
    Terminal:   nano ~/.profile
    Add:        export FLASKBLOG_SECRET_KEY="your key"
                export FLASKBLOG_SQLALCHEMY_DATABASE_URI="your uri"
                export FLASKBLOG_EMAIL_USER ="google email"
                export FLASKBLOG_EMAIL_PASS="gooogle password"

    Saved it and reload bash : Log out and log in again.
    To test using command: printenv

    SECRET_KEY = os.environ.get("FLASKBLOG_SECRET_KEY")
    SQLALCHEMY_DATABASE_URI = os.environ.get("FLASKBLOG_SQLALCHEMY_DATABASE_URI")
    MAIL_USERNAME = os.environ.get("FLASKBLOG_EMAIL_USER")
    MAIL_PASSWORD = os.environ.get("FLASKBLOG_EMAIL_PASS")


3. When you were sent an email, an error shown up like this
    "smtplib.SMTPSenderRefused: (530, b'5.5.1 Authentication Required. Learn more at\n5.5.1
    https://support.google.com/mail/?p=WantAuthError d23-v6sm267784pfe.2 - gsmtp', 'noreply@demo.com')"

Go to: https://support.google.com/accounts/answer/6010255
Then go to: https://myaccount.google.com/lesssecureapps?pli=1  ==> Changed to : Allowed

May be the error causes of: os.environ.get("EMAIL_USER") -> try to test with real email.


#### Creation of app to function --> to create more instances of app with different configuration

Now to create new application with different Config Object we can do by:
    from flaskblog import create_ap
    app = create_app(Config_Object)



=========================================================================
sudo apt-get install postgresql-10 pgadmin4

sudo -i -u postgres

psql                                                # Login to postgresql

CREATE USER prosolorg WITH PASSWORD 'prosolorg';    # create new user (new role)

SELECT usename FROM pg_user;                        # check create successfull or not?

CREATE DATABASE flask_prosolorg_app OWNER prosolorg;# create database for app

\l                                                  # check database created successfull or not ?

\q                                                  # quit terminal


source activate web

conda install -c conda-forge flask-sqlalchemy

conda install -c conda-forge psycopg2

conda env export > environment.yml





===================== Database ==========================
Posts are an abstraction for a content types
Categories and Tags are abstractions for taxonomies
Users are abstractions for accounts

http://flask-sqlalchemy.pocoo.org/2.3/models/
http://flask-sqlalchemy.pocoo.org/2.3/quickstart/#quickstart
https://codex.wordpress.org/Administration_Panels
https://codex.wordpress.org/Database_Description#Database_Diagram
